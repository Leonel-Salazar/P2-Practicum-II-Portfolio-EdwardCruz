---
title: "R Coding Exercise"
author: "Edward Cruz,Jr."
date: "today"
execute: 
  warning: false
  error: true
format:
  html:
    theme: ""
---
## Loading and Checking Data
### Import libraries
```{r}
update.packages('dslabs')
library(dslabs) # to import dataset
update.packages('tidyverse')
library(tidyverse) # data aggregation
library(dplyr) # data aggregation? 
data(polls_us_election_2016)
```

### Help Function
```{r}
help("polls_us_election_2016")
```

### Data Structure Overview
```{r}
str(polls_us_election_2016)
```



### Data Summary
```{r}
summary(polls_us_election_2016)
```
### Class Functions - Object Determination
```{r}
class(polls_us_election_2016)
```

### View data set 
```{r}
view(polls_us_election_2016)
```

## Processing Data
### Assign only U.S. to a new object/variable.
```{r}
vote_data = filter(polls_us_election_2016,  state == 'U.S.')
head(vote_data)
```


### U.S. Data Structure Overview
```{r}
str(vote_data)
```

### U.S. Summary
```{r}
summary(vote_data)
```
### Adjusted Poll Object
```{r}
adjusted_polls = vote_data %>%
  select(adjpoll_clinton,adjpoll_trump )
head(adjusted_polls)
```
### Adjusted Poll Data Structure
```{r}
str(adjusted_polls)
```
### Adjusted Poll Data Summary
```{r}
summary(adjusted_polls)
```
### Raw Poll Object
```{r}
raw_polls = vote_data %>%
  select(rawpoll_clinton,rawpoll_trump )
head(raw_polls)
```
### Raw Poll Data Structure
```{r}
str(raw_polls)
```
### Raw Poll Data Summary
```{r}
summary(raw_polls)
```
## Plotting
### Adjusted Poll as a Function for Trump & Clinton

Eddies Graphs Calculation Keep and delete the one prior
```{r}
# Perform linear regression
regression = lm(adjusted_polls$adjpoll_clinton ~ adjusted_polls$adjpoll_trump)

# Function to calculate R-squared
rsq <- function() summary(regression)$r.squared
r_square = round(rsq(), 3)

# Get regression coefficients
coeff = round(summary(regression)$coefficients[2, 1], 3)
y_int = round(summary(regression)$coefficients[1, 1], 3)

# Create plot
plot(
  adjusted_polls$adjpoll_trump,
  adjusted_polls$adjpoll_clinton,
  main='Adjusted Polls Trump & Clinton',
  xlab='Adjusted Trump Poll',
  ylab='Adjusted Clinton Poll',
  col='lightgreen',
  bg='olivedrab3',
  pch = 21
)

# Add regression equation and R-squared value to the plot
rsq_str = expression(paste("R"^2, ": "))
rsq_str = "r2: "
text(47, 55, paste0('y = ', coeff, 'x + ', y_int), cex=0.75)
text(47, 54, bquote(.(rsq_str) * .(r_square)), cex=0.75)

# Add regression line
abline(regression, col='darkblue', lwd=1.75)
```
### Raw Polls as a Function for Trump & Clinton
Eddies graph Keep delete prior
```{r}
# Perform linear regression
regression = lm(raw_polls$rawpoll_clinton ~ raw_polls$rawpoll_trump)

# Function to calculate R-squared
rsq <- function() summary(regression)$r.squared
r_square = round(rsq(), 3)

# Get regression coefficients
coeff = round(summary(regression)$coefficients[2, 1], 9)
y_int = round(summary(regression)$coefficients[1, 1], 3)

# Create plot
plot(
  raw_polls$rawpoll_trump,
  raw_polls$rawpoll_clinton,
  main='Raw Polls Trump & Clinton',
  xlab='Raw Trump Poll',
  ylab='Raw Clinton Poll',
  col='lightgreen',
  bg='olivedrab3',
  pch = 21
)

# Add regression equation and R-squared value to the plot
rsq_str = expression(paste("R"^2, ": "))
rsq_str = "r2: "
text(47, 55, paste0('y = ', coeff, 'x + ', y_int), cex=0.75)
text(47, 53, bquote(.(rsq_str) * .(r_square)), cex=0.75)

# Add regression line
abline(regression, col='darkblue', lwd=1.75)
```
#Additional Data Processing to determine any missing data or NA
#None Found
```{r}
miss_adj_polls=vote_data%>%
  filter(is.na(adjpoll_clinton))
head(miss_adj_polls)
```
#Additional Data Processing to determine any missing data or NA
#None Found 
```{r}
miss_adj_polls=vote_data%>%
  filter(is.na(adjpoll_trump))
head(miss_adj_polls)
```




```{r}
miss_raw_polls=vote_data%>%
  filter(is.na(rawpoll_clinton))
head(miss_raw_polls)
```





```{r}
miss_raw_polls=vote_data%>%
  filter(is.na(rawpoll_trump))
head(miss_raw_polls)
```

Fit Adjusted Poll for Clinton and Trump
```{r}
#Log Regression
fit1 = lm(adjpoll_clinton ~ log(adjpoll_trump), data=adjusted_polls)
summary(fit1)
```

```{r}
# Linear regression
fit1 = lm(adjpoll_clinton ~ adjpoll_trump, data=adjusted_polls)
summary(fit1)

# Polynomial regression of degree 2
fit2 = lm(adjpoll_clinton ~ poly(adjpoll_trump, 2), data=adjusted_polls)
summary(fit2)

# Plot the data
plot(
  adjusted_polls$adjpoll_trump,
  adjusted_polls$adjpoll_clinton,
  main='Adjusted Polls: Linear and Polynomial Regression',
  xlab='adjpoll_trump',
  ylab='adjpoll_clinton',
  col='lightgreen',
  bg='olivedrab3',
  pch = 21
)

# Add linear regression line
abline(fit1, col='red', lwd=2)

# Add polynomial regression line
# Generate a sequence of values for adjpoll_trump for the polynomial line
new_data <- data.frame(adjpoll_trump = seq(min(adjusted_polls$adjpoll_trump), max(adjusted_polls$adjpoll_trump), length.out=100))
# Predict the values of adjpoll_clinton for the generated sequence
poly_pred <- predict(fit2, new_data)
# Add the polynomial regression line to the plot
lines(new_data$adjpoll_trump, poly_pred, col='blue', lwd=2)

# Add a legend to differentiate the lines
legend("topright", legend=c("Linear Fit", "Polynomial Fit (degree 2)"), col=c("red", "blue"), lwd=2)
```
### Fit Raw Poll 
```{r}
#Log Regression
fit2 = lm(rawpoll_clinton ~ log(rawpoll_trump), data=vote_data)
summary(fit2)

```
```{r}
# Linear regression
fit1 = lm(rawpoll_clinton ~ rawpoll_trump, data=raw_polls)
summary(fit1)

# Polynomial regression of degree 2
fit2 = lm(rawpoll_clinton ~ poly(rawpoll_trump, 2), data=raw_polls)
summary(fit2)

# Plot the data
plot(
  raw_polls$rawpoll_trump,
  raw_polls$rawpoll_clinton,
  main='Raw Polls: Linear and Polynomial Regression',
  xlab='rawpoll_trump',
  ylab='rawpoll_clinton',
  col='lightgreen',
  bg='olivedrab3',
  pch = 21
)

# Add linear regression line
abline(fit1, col='red', lwd=2)

# Add polynomial regression line
# Generate a sequence of values for rawpoll_trump for the polynomial line
new_data <- data.frame(rawpoll_trump = seq(min(raw_polls$rawpoll_trump), max(raw_polls$rawpoll_trump), length.out=100))
# Predict the values of rawpoll_clinton for the generated sequence
poly_pred <- predict(fit2, new_data)
# Add the polynomial regression line to the plot
lines(new_data$rawpoll_trump, poly_pred, col='blue', lwd=2)

# Add a legend to differentiate the lines
legend("topright", legend=c("Linear Fit", "Polynomial Fit (degree 2)"), col=c("red", "blue"), lwd=2)
```
```


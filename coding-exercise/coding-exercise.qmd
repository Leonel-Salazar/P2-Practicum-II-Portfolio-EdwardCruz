---
title: "R Coding Exercise"
---

Placeholder file for the future R coding exercise.




## Loading and Checking Data
### Import libraries
```{r}
#update.packages('dslabs')
library(dslabs) # to import dataset
library(tidyverse) # data aggregation
library(dplyr) # data aggregation? 
data(gapminder)
```

### Help Function
```{r}
help("gapminder")
```

### Data Structure Overview
```{r}
str(gapminder)
```
### Data Summary
```{r}
summary(gapminder)
```
### Class Functions - Object Determination
```{r}
class(gapminder)
```

## Processing Data
### Assign only African countries to a new object/variable.
```{r}
africadata = filter(gapminder, continent == 'Africa')
head(africadata)
```

### Africa Data Structure Overview
```{r}
str(africadata)
```
### Africa Summary
```{r}
summary(africadata)
```
### African Infant Mortality Object
```{r}
infant_survival_rate = africadata %>%
  select(infant_mortality, life_expectancy)
head(infant_survival_rate)
```

### African Infant Mortality Data Structure
```{r}
str(infant_survival_rate)
```

### African Infant Mortality Data Summary
```{r}
summary(infant_survival_rate)
```
### African Mortality Object
```{r}
african_mortality = africadata %>%
  select(population, life_expectancy)
head(african_mortality)
```

### African Mortality Data Structure
```{r}
str(african_mortality)
```

### African Mortality Data Summary
```{r}
summary(african_mortality)
```
## Plotting
### Life Expectancy as a Function of Infant Mortality
```{r}
regression = lm(infant_survival_rate$life_expectancy ~ infant_survival_rate$infant_mortality)
rsq <- function(x, y) summary(lm(infant_survival_rate$life_expectancy ~ infant_survival_rate$infant_mortality))$r.squared
r_square = round(rsq(obs, mod), 3)
# summary(regression)$coefficients - keep to sanity check
coeff = round(summary(regression)$coefficients[2],3)
y_int = round(summary(regression)$coefficients[1],3)
plot(
  infant_survival_rate$infant_mortality,
  infant_survival_rate$life_expectancy,
  main='African Life Expectancy \n Infant Mortality Effect',
  xlab='Infant Mortality',
  ylab='Life Expectancy',
   col='aquamarine', 
   bg='cornflowerblue', 
   pch = 21,
)
# rsq_str = expression(paste("r"^"2:"))
rsq_str = "r2: "
text(175, 75, paste0('y = ', coeff, 'x + ', y_int), cex=0.75)
text(170, 70, paste0(rsq_str, r_square), cex=0.75)
abline(
  lm(
    infant_survival_rate$life_expectancy ~ infant_survival_rate$infant_mortality),
  col='darkblue',
  lwd=1.75)
```

### Life Expectancy as a Function of Population
```{r}
regression = lm(african_mortality$life_expectancy ~ african_mortality$population)
rsq <- function(x, y) summary(lm(african_mortality$life_expectancy ~ african_mortality$population))$r.squared
r_square = round(rsq(obs, mod), 3)
# summary(regression)$coefficients - keep to sanity check
coeff = round(summary(regression)$coefficients[2],9)
y_int = round(summary(regression)$coefficients[1],3)
plot(
  african_mortality$population,
  african_mortality$life_expectancy,
  main='African Life Expectancy \n Population Effect',
  xlab='Population',
  ylab='Life Expectancy',
  col='aquamarine', 
  bg='cornflowerblue', 
  pch = 21,
)
# rsq_str = expression(paste("r"^"2:"))
rsq_str = "r2: "
text(155000000, 75, paste0('y = ', coeff, 'x + ', y_int), cex=0.75)
text(155000000, 70, paste0(rsq_str, r_square), cex=0.75)
abline(
lm(
  african_mortality$life_expectancy ~ african_mortality$population),
col='darkblue',
lwd=1.75)
```

** STILL NEED TO ANSWER QUESTION AT THE END OF THE PLOTTING SECTION**
 The graph attempts to demonstrate that relationship between Population increase and life expectancy overcoming life expectancy with a low R^2 is not dependent on life expectancy but possibly resulting from the stongest will survive and improving healthcare accissbility, GDP-gross domestic product, eduction and food source successfully allowing those Africans to survive and continue.  
## More Data Processing
### Missing Years For Infant Mortality Data
```{r}
miss_inf_mort_rows = africadata %>%
  filter(is.na(infant_mortality))
head(miss_inf_mort_rows)
```

### Perform Year Groupby to Identify Distinct Missing Years
```{r}
miss_inf_mort_yrs = miss_inf_mort_rows %>%
  group_by(year) %>%
  count(infant_mortality)
miss_inf_mort_yrs
```

### Extract Only Year 2000 From africadata As New Object
```{r}
africadata2000 = filter(africadata, year == 2000)
africadata2000
```
### africadata2000 Data Structure
```{r}
str(africadata2000)
```
### africadata2000 Data Summary
```{r}
summary(africadata2000)
```

## More Plotting
### Create The Same Plots For africadata2000 Object
#### Filter New Object to Create Graph Datasets (1/2)
```{r}
african_mortality2000 = africadata2000 %>%
  select(population, life_expectancy)
head(african_mortality2000)
```
#### Filter New Object to Create Graph Datasets (2/2)
```{r}
infant_survival_rate2000 = africadata2000 %>%
  select(infant_mortality, life_expectancy)
head(african_mortality2000)
```


#### Infant Mortality Effect
```{r}
regression = lm(infant_survival_rate2000$life_expectancy ~ infant_survival_rate2000$infant_mortality)
rsq <- function(x, y) summary(lm(infant_survival_rate2000$life_expectancy ~ infant_survival_rate2000$infant_mortality))$r.squared
r_square = round(rsq(obs, mod), 3)
# summary(regression)$coefficients - keep to sanity check
coeff = round(summary(regression)$coefficients[2],3)
y_int = round(summary(regression)$coefficients[1],3)
plot(
  infant_survival_rate2000$infant_mortality,
  infant_survival_rate2000$life_expectancy,
  main='African Life Expectancy \n Infant Mortality Effect',
  xlab='Infant Mortality',
  ylab='Life Expectancy',
   col='aquamarine', 
   bg='cornflowerblue', 
   pch = 21,
)
# rsq_str = expression(paste("r"^"2:"))
rsq_str = "r2: "
text(130, 75, paste0('y = ', coeff, 'x + ', y_int), cex=0.75)
text(130, 73, paste0(rsq_str, r_square), cex=0.75)
abline(
  lm(
    infant_survival_rate2000$life_expectancy ~ infant_survival_rate2000$infant_mortality),
  col='darkblue',
  lwd=1.75)
```

#### Population Effect
```{r}
fit2 = lm(african_mortality2000$life_expectancy ~ african_mortality2000$population)
summary(fit2)
```
```{r}
# Logarithmic regression
fit2 = lm(life_expectancy ~ log(population), data=african_mortality2000)
summary(fit2)

```

```{r}
regression = lm(african_mortality2000$life_expectancy ~ african_mortality2000$population)
rsq <- function(x, y) summary(lm(african_mortality2000$life_expectancy ~ african_mortality2000$population))$r.squared
r_square = round(rsq(obs, mod), 3)
# summary(regression)$coefficients - keep to sanity check
coeff = round(summary(regression)$coefficients[2],9)
y_int = round(summary(regression)$coefficients[1],3)
plot(
  african_mortality2000$population,
  african_mortality2000$life_expectancy,
  main='African Life Expectancy \n Population Effect',
  xlab='Population',
  ylab='Life Expectancy',
  col='aquamarine', 
  bg='cornflowerblue', 
  pch = 21,
)
# rsq_str = expression(paste("r"^"2:"))
rsq_str = "r2: "
text(110000000, 75, paste0('y = ', coeff, 'x + ', y_int), cex=0.75)
text(110000000, 73, paste0(rsq_str, r_square), cex=0.75)
abline(
lm(
  african_mortality2000$life_expectancy ~ african_mortality2000$population),
col='darkblue',
lwd=1.75)
```

## Simple Model Fits
### Fit Life Expectancy to Infant Mortality


```{r}
fit1 = lm(life_expectancy ~ log(infant_mortality), data=infant_survival_rate2000)
summary(fit1)
```

```{r}
# Linear regression
fit1 = lm(life_expectancy ~ infant_mortality, data=infant_survival_rate2000)
summary(fit1)

# Polynomial regression of degree 2
fit2 = lm(life_expectancy ~ poly(infant_mortality, 2), data=infant_survival_rate2000)
summary(fit2)

# Plotting
plot(
  infant_survival_rate2000$infant_mortality,
  infant_survival_rate2000$life_expectancy,
  main='Infant Mortality vs Life Expectancy',
  xlab='Infant Mortality',
  ylab='Life Expectancy',
  col='aquamarine',
  pch=19
)

# Add linear regression line
abline(fit1, col='darkblue')

# Add polynomial regression line
new_data <- data.frame(infant_mortality = seq(min(infant_survival_rate2000$infant_mortality), max(infant_survival_rate2000$infant_mortality), length.out=100))
lines(new_data$infant_mortality, predict(fit2, new_data), col='cornflowerblue')

```

### Fit Life Expectancy to Population
```{r}
# Logarithmic regression
fit2 = lm(life_expectancy ~ log(population), data=african_mortality2000)
summary(fit2)

```
#### Conclusion
The African population and life expectancy analysis shows no significant relationship between population size and life expectancy in African countries according to this linear model. The very low R-squared value indicates that population size explains only a tiny fraction of the variation in life expectancy. This suggests that other factors, such as healthcare access, economic conditions, education, and other social determinants, are likely much more important in explaining differences in life expectancy across African countries. TO reiterate, there is tremendous suffering and mortality with the children of the populations however the resiliency of this country has been successfully documented indicating the economics, education and healthcare is improving to continue allowing the population with access to these areas to successfully prosper and survive. 

***  This part contributed by Leonel Salazar, IGE436 ***



## Loading and Checking Data
### Import libraries

```{r}
library(dslabs) # to import dataset
library(tidyverse) # data aggregation
library(dplyr) # data aggregation? 
library(renv)
library(caret)
data("stars")
```

### Help Function
```{r}
help("stars")
```

### Data Structure Overview
```{r}
str(stars)
```
### Data Summary
```{r}
summary(stars)
```
### Class Functions - Object Determination
```{r}
class(stars)
```



### Star Type based on Magnitude
```{r}
Type_Magnitude = stars %>%
  select(type, magnitude )
head(Type_Magnitude)
```

### Stars Type and Magnitude Structure
```{r}
str(Type_Magnitude)
```


```{r}
# Convert to factor (default order is alphabetical)
Type_Magnitude$type <- as.factor(Type_Magnitude$type)

str(Type_Magnitude)

```


### Stars Type and Magnitude data summary
```{r}
summary(Type_Magnitude)
```
### Stars by Type and Temp
```{r}
Type_Temp = stars %>%
  select(type, temp)
head(Type_Temp)
```

### Type Temp Data Structure
```{r}
Type_Temp$type <- as.factor(Type_Temp$type)

# Convert to numeric
Type_Temp$temp <- as.numeric(Type_Temp$temp)

str(Type_Temp)


```

### Type Temp Data Summary
```{r}
summary(Type_Temp)
```
```{r}

Mag_Temp = stars %>%
  select(magnitude, temp)
head(Mag_Temp)

```

### Histogram of variables

```{r}

hist(Type_Magnitude$magnitude)
hist(Type_Temp$temp)

```


### Plotting
### Star Magnitude as a function of Star temperature

```{r}
regression = lm(Mag_Temp$magnitude ~ Mag_Temp$temp)
rsq <- function(x, y) summary(lm(Mag_Temp$magnitude ~ Mag_Temp$temp))$r.squared
r_square = round(rsq(obs, mod), 3)
# summary(regression)$coefficients - keep to sanity check
coeff = round(summary(regression)$coefficients[2],3)
y_int = round(summary(regression)$coefficients[1],3)
plot(
  Mag_Temp$magnitude,
  Mag_Temp$temp,
  main='Magnitude and temperature of star',
  xlab='Magnitude',
  ylab='Temperature',
   col='lightblue', 
   bg='black', 
   pch = 21,
)
# rsq_str = expression(paste("r"^"2:"))
rsq_str = "r2: "
text(175, 75, paste0('y = ', coeff, 'x + ', y_int), cex=0.75)
text(170, 70, paste0(rsq_str, r_square), cex=0.75)
abline(
  lm(
    Mag_Temp$magnitude ~ Mag_Temp$temp),
  col='red',
  lwd=1.75)
```



```{r}

fit1 = lm(Mag_Temp$magnitude ~ Mag_Temp$temp)
summary(fit1)


```
*** Based on this analysis, there's a statistically significant negative linear relationship between "temp" and "magnitude" in the "Mag_Temp" data. The model explains about 40% of the variance in "magnitude.  ***



```{r}
regression2 = lm(Type_Magnitude$magnitude ~ Type_Magnitude$type)
rsq <- function(x, y) summary(lm(Type_Magnitude$magnitude ~ Type_Magnitude$type))$r.squared
r_square = round(rsq(obs, mod), 3)
# summary(regression)$coefficients - keep to sanity check
coeff = round(summary(regression)$coefficients[2],3)
y_int = round(summary(regression)$coefficients[1],3)
plot(
  Type_Magnitude$magnitude,
  Type_Magnitude$type,
  main='Magnitude by type of star',
  xlab='Magnitude',
  ylab='Type',
   col='lightblue', 
   bg='black', 
   pch = 21,
)
# rsq_str = expression(paste("r"^"2:"))
rsq_str = "r2: "
text(175, 75, paste0('y = ', coeff, 'x + ', y_int), cex=0.75)
text(170, 70, paste0(rsq_str, r_square), cex=0.75)
abline(
  lm(
    Type_Magnitude$magnitude ~ Type_Magnitude$type),
  col='red',
  lwd=1.75)


```


```{r}

fit2 = lm(Type_Magnitude$magnitude ~ Type_Magnitude$type)
summary(fit2)

```
*** Based on this analysis, there's a statistically significant relationship between "type" and "magnitude" in the "Type_Magnitude" data. The model explains about 73% of the variance in "magnitude ***



```{r}

regression3 = lm(Type_Temp$temp ~ Type_Temp$type)
rsq <- function(x, y) summary(lm(Type_Temp$temp ~ Type_Temp$type))$r.squared
r_square = round(rsq(obs, mod), 3)
# summary(regression)$coefficients - keep to sanity check
coeff = round(summary(regression)$coefficients[2],3)
y_int = round(summary(regression)$coefficients[1],3)
plot(
  Type_Temp$temp,
  Type_Temp$type,
  main='Temp by type of star',
  xlab='Temp',
  ylab='Type',
   col='lightblue', 
   bg='black', 
   pch = 21,
)
# rsq_str = expression(paste("r"^"2:"))
rsq_str = "r2: "
text(175, 75, paste0('y = ', coeff, 'x + ', y_int), cex=0.75)
text(170, 70, paste0(rsq_str, r_square), cex=0.75)
abline(
  lm(
    Type_Temp$temp ~ Type_Temp$type),
  col='red',
  lwd=1.75)


```

```{r}

fit3 = lm(Type_Temp$temp ~ Type_Temp$type)
summary(fit3)


```

*** The very high R-squared value (0.8924) suggests a strong relationship between "type" and "temp." However, it's important to be cautious with such a high value, as it could indicate overfitting ***



#### Conclusion



*** It might be possible to accurately predict what type of star a star may be by knowing the temperature and magnitude of a star. We would need better data because we can see in the histograms that the data is not linear or very normal. We would have to transform the data to get more accurate and reliable results. ***




































